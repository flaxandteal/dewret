# This file is autogenerated by maturin v0.15.2
# To update, run
#
#    maturin generate-ci github
#
name: CI

on:
  push:
    branches:
      - main
      - master
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build_conda:
    name: Build package
    runs-on: ubuntu-latest # Currently, only need noarch
    # runs-on: ${{ matrix.os }}
    # strategy:
    #   matrix:
    #     include:
    #       - os: ubuntu-latest
    #         target-platform: linux-64
    #       - os: ubuntu-latest
    #         target-platform: linux-aarch64
    #       - os: windows-latest
    #         target-platform: win-64
    #       - os: macos-latest
    #         target-platform: osx-64
    #       - os: macos-14
    #         target-platform: osx-arm64
    steps:
    - uses: actions/checkout@v4
    - name: Tweak recipe
      run: pip install toml && python .github/workflows/generate_recipe.py
    - name: Build conda package
      uses: prefix-dev/rattler-build-action@v0.2.2
      env:
        CONDA_BLD_PATH: ../output
        RATTLER_BUILD_EXPERIMENTAL: "true"
      with:
        # needs to be unique for each matrix entry
        #artifact-name: package-noarch #-${{ matrix.target-platform }}
        recipe-path: ./recipe.yaml
        upload-artifact: false
        #build-args: --target-platform noarch # ${{ matrix.target-platform }}${{ matrix.target-platform == 'linux-aarch64' && ' --no-test' || '' }}
    - run: mv ../output .
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: conda-package
        path: |
          output/**/*.tar.bz2
          output/**/*.conda
  build_wheel:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ubuntu-latest # Currently, only need noarch
    # runs-on: ${{ matrix.os }}
    # strategy:
    #   matrix:
    #     os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: hynek/build-and-inspect-python-package@v2
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build
      - uses: actions/upload-artifact@v3
        name: Upload wheel
        with:
          name: wheels
          path: dist

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/<package-name>  # Replace <package-name> with your PyPI project name
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: wheels
        path: dist/
    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: >-
      Sign the Python 🐍 distribution 📦 with Sigstore
      and upload them to GitHub Release
    needs:
    - publish-to-pypi
    runs-on: ubuntu-latest

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write  # IMPORTANT: mandatory for sigstore

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: wheels
        path: dist/
    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v1.2.3
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --notes ""
    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      # Upload to GitHub Release using the `gh` CLI.
      # `dist/` contains the built packages, and the
      # sigstore-produced signatures and certificates.
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'

  publish-to-testpypi:
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/<package-name>

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: wheels
        path: dist/
    - name: Publish distribution 📦 to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
